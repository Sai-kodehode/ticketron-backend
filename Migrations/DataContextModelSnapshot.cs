// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ticketron.Data;

#nullable disable

namespace Ticketron.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GroupUnregUser", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnregUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupsId", "UnregUsersId");

                    b.HasIndex("UnregUsersId");

                    b.ToTable("GroupUnregUser");
                });

            modelBuilder.Entity("Ticketron.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Ticketron.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Ticketron.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedUnregUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("PurchaseDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("PurchasedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUnregUserId");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("BookingId");

                    b.HasIndex("PurchasedById");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Ticketron.Models.UnregUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("CreatedById");

                    b.ToTable("UnregUsers");
                });

            modelBuilder.Entity("Ticketron.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("GroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GroupUnregUser", b =>
                {
                    b.HasOne("Ticketron.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketron.Models.UnregUser", null)
                        .WithMany()
                        .HasForeignKey("UnregUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ticketron.Models.Booking", b =>
                {
                    b.HasOne("Ticketron.Models.User", "CreatedBy")
                        .WithMany("Bookings")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Ticketron.Models.Group", b =>
                {
                    b.HasOne("Ticketron.Models.Booking", null)
                        .WithMany("Groups")
                        .HasForeignKey("BookingId");

                    b.HasOne("Ticketron.Models.User", "CreatedBy")
                        .WithMany("Groups")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Ticketron.Models.Ticket", b =>
                {
                    b.HasOne("Ticketron.Models.UnregUser", "AssignedUnregUser")
                        .WithMany()
                        .HasForeignKey("AssignedUnregUserId");

                    b.HasOne("Ticketron.Models.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("Ticketron.Models.Booking", "Booking")
                        .WithMany("Tickets")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketron.Models.User", "PurchasedBy")
                        .WithMany()
                        .HasForeignKey("PurchasedById");

                    b.Navigation("AssignedUnregUser");

                    b.Navigation("AssignedUser");

                    b.Navigation("Booking");

                    b.Navigation("PurchasedBy");
                });

            modelBuilder.Entity("Ticketron.Models.UnregUser", b =>
                {
                    b.HasOne("Ticketron.Models.Booking", null)
                        .WithMany("UnregUsers")
                        .HasForeignKey("BookingId");

                    b.HasOne("Ticketron.Models.User", "CreatedBy")
                        .WithMany("UnregUsers")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Ticketron.Models.User", b =>
                {
                    b.HasOne("Ticketron.Models.Booking", null)
                        .WithMany("Users")
                        .HasForeignKey("BookingId");

                    b.HasOne("Ticketron.Models.Group", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Ticketron.Models.Booking", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Tickets");

                    b.Navigation("UnregUsers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ticketron.Models.Group", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ticketron.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Groups");

                    b.Navigation("UnregUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
