// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ticketron.Data;

#nullable disable

namespace Ticketron.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240920130137_Creating database")]
    partial class Creatingdatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ticketron.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnreguserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnreguserId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Ticketron.Models.BookingParticipant", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.HasKey("BookingId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("BookingParticipants");
                });

            modelBuilder.Entity("Ticketron.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnreguserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnreguserId");

                    b.HasIndex("UserId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Ticketron.Models.Groupmember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Groupmembers");
                });

            modelBuilder.Entity("Ticketron.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Imageurl")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Ticketron.Models.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Ticketron.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Ticketron.Models.TicketParticipant", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.HasKey("TicketId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("TicketParticipants");
                });

            modelBuilder.Entity("Ticketron.Models.Unreguser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GroupmemberId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupmemberId");

                    b.HasIndex("UserId");

                    b.ToTable("Unregusers");
                });

            modelBuilder.Entity("Ticketron.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupmemberId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupmemberId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ticketron.Models.Booking", b =>
                {
                    b.HasOne("Ticketron.Models.Unreguser", null)
                        .WithMany("Bookings")
                        .HasForeignKey("UnreguserId");

                    b.HasOne("Ticketron.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticketron.Models.BookingParticipant", b =>
                {
                    b.HasOne("Ticketron.Models.Booking", "Booking")
                        .WithMany("BookingParticipants")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticketron.Models.Participant", "Participant")
                        .WithMany("BookingParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Ticketron.Models.Group", b =>
                {
                    b.HasOne("Ticketron.Models.Unreguser", null)
                        .WithMany("Groups")
                        .HasForeignKey("UnreguserId");

                    b.HasOne("Ticketron.Models.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticketron.Models.Groupmember", b =>
                {
                    b.HasOne("Ticketron.Models.Group", null)
                        .WithMany("Groupmembers")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Ticketron.Models.Image", b =>
                {
                    b.HasOne("Ticketron.Models.Ticket", "Ticket")
                        .WithMany("Images")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Ticketron.Models.Participant", b =>
                {
                    b.HasOne("Ticketron.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Ticketron.Models.Ticket", b =>
                {
                    b.HasOne("Ticketron.Models.Booking", "Booking")
                        .WithMany("Tickets")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Ticketron.Models.TicketParticipant", b =>
                {
                    b.HasOne("Ticketron.Models.Participant", "Participant")
                        .WithMany("TicketParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticketron.Models.Ticket", "Ticket")
                        .WithMany("TicketParticipants")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Ticketron.Models.Unreguser", b =>
                {
                    b.HasOne("Ticketron.Models.Groupmember", null)
                        .WithMany("Unregusers")
                        .HasForeignKey("GroupmemberId");

                    b.HasOne("Ticketron.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticketron.Models.User", b =>
                {
                    b.HasOne("Ticketron.Models.Groupmember", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupmemberId");
                });

            modelBuilder.Entity("Ticketron.Models.Booking", b =>
                {
                    b.Navigation("BookingParticipants");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Ticketron.Models.Group", b =>
                {
                    b.Navigation("Groupmembers");
                });

            modelBuilder.Entity("Ticketron.Models.Groupmember", b =>
                {
                    b.Navigation("Unregusers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ticketron.Models.Participant", b =>
                {
                    b.Navigation("BookingParticipants");

                    b.Navigation("TicketParticipants");
                });

            modelBuilder.Entity("Ticketron.Models.Ticket", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("TicketParticipants");
                });

            modelBuilder.Entity("Ticketron.Models.Unreguser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Ticketron.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Groups");
                });
#pragma warning restore 612, 618
        }
    }
}
